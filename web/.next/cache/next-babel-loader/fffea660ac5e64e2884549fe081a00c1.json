{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport HttpConfig from '../http/httpconfig';\nexport function httpGet(_x) {\n  return _httpGet.apply(this, arguments);\n}\n\nfunction _httpGet() {\n  _httpGet = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(route) {\n    var response, responseJson;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return fetch(\"http://\".concat(HttpConfig.host, \":\").concat(HttpConfig.port, \"/\").concat(route));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return response.json();\n\n          case 6:\n            responseJson = _context.sent;\n            return _context.abrupt(\"return\", responseJson);\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 10]]);\n  }));\n  return _httpGet.apply(this, arguments);\n}\n\nexport function httpPost(_x2, _x3) {\n  return _httpPost.apply(this, arguments);\n}\n\nfunction _httpPost() {\n  _httpPost = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(route, data) {\n    var response, responseJson;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return fetch(\"http://\".concat(HttpConfig.host, \":\").concat(HttpConfig.port, \"/\").concat(route), {\n              method: 'POST',\n              body: _JSON$stringify(data),\n              headers: {\n                \"Content-type\": \"application/json; charset=UTF-8\"\n              }\n            });\n\n          case 3:\n            response = _context2.sent;\n            _context2.next = 6;\n            return response.json();\n\n          case 6:\n            responseJson = _context2.sent;\n            return _context2.abrupt(\"return\", responseJson);\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error(_context2.t0);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 10]]);\n  }));\n  return _httpPost.apply(this, arguments);\n}\n\nexport function httpDelete(_x4, _x5) {\n  return _httpDelete.apply(this, arguments);\n}\n\nfunction _httpDelete() {\n  _httpDelete = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(route, data) {\n    var response, responseJson;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return fetch(\"http://\".concat(HttpConfig.host, \":\").concat(HttpConfig.port, \"/\").concat(route), {\n              method: 'POST'\n            });\n\n          case 3:\n            response = _context3.sent;\n            _context3.next = 6;\n            return response.json();\n\n          case 6:\n            responseJson = _context3.sent;\n            return _context3.abrupt(\"return\", responseJson);\n\n          case 10:\n            _context3.prev = 10;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.error(_context3.t0);\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 10]]);\n  }));\n  return _httpDelete.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/Min Khant/Desktop/Monorepo/shared/http/httpHandler.js"],"names":["HttpConfig","httpGet","route","fetch","host","port","response","json","responseJson","console","error","httpPost","data","method","body","headers","httpDelete"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,oBAAvB;AAEA,gBAAsBC,OAAtB;AAAA;AAAA;;;;;2BAAO,iBAAuBC,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEsBC,KAAK,kBACdH,UAAU,CAACI,IADG,cACKJ,UAAU,CAACK,IADhB,cACwBH,KADxB,EAF3B;;AAAA;AAEKI,YAAAA,QAFL;AAAA;AAAA,mBAK0BA,QAAQ,CAACC,IAAT,EAL1B;;AAAA;AAKKC,YAAAA,YALL;AAAA,6CAMQA,YANR;;AAAA;AAAA;AAAA;AAQCC,YAAAA,OAAO,CAACC,KAAR;;AARD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAYP,gBAAsBC,QAAtB;AAAA;AAAA;;;;;2BAAO,kBAAwBT,KAAxB,EAA+BU,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEsBT,KAAK,kBACdH,UAAU,CAACI,IADG,cACKJ,UAAU,CAACK,IADhB,cACwBH,KADxB,GAExB;AACIW,cAAAA,MAAM,EAAE,MADZ;AAEIC,cAAAA,IAAI,EAAE,gBAAeF,IAAf,CAFV;AAGIG,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT;AAHb,aAFwB,CAF3B;;AAAA;AAEKT,YAAAA,QAFL;AAAA;AAAA,mBAY0BA,QAAQ,CAACC,IAAT,EAZ1B;;AAAA;AAYKC,YAAAA,YAZL;AAAA,8CAaQA,YAbR;;AAAA;AAAA;AAAA;AAeCC,YAAAA,OAAO,CAACC,KAAR;;AAfD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAmBP,gBAAsBM,UAAtB;AAAA;AAAA;;;;;2BAAO,kBAA0Bd,KAA1B,EAAiCU,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEsBT,KAAK,kBACdH,UAAU,CAACI,IADG,cACKJ,UAAU,CAACK,IADhB,cACwBH,KADxB,GAExB;AACIW,cAAAA,MAAM,EAAE;AADZ,aAFwB,CAF3B;;AAAA;AAEKP,YAAAA,QAFL;AAAA;AAAA,mBAQ0BA,QAAQ,CAACC,IAAT,EAR1B;;AAAA;AAQKC,YAAAA,YARL;AAAA,8CASQA,YATR;;AAAA;AAAA;AAAA;AAWCC,YAAAA,OAAO,CAACC,KAAR;;AAXD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import HttpConfig from '../http/httpconfig'\r\n\r\nexport async function httpGet(route) {\r\n    try {\r\n        let response = await fetch(\r\n          `http://${HttpConfig.host}:${HttpConfig.port}/${route}`,\r\n        );\r\n        let responseJson = await response.json();\r\n        return responseJson;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n}\r\n\r\nexport async function httpPost(route, data) {\r\n    try {\r\n        let response = await fetch(\r\n          `http://${HttpConfig.host}:${HttpConfig.port}/${route}`,\r\n          {\r\n              method: 'POST',\r\n              body: JSON.stringify(data),\r\n              headers: {\r\n                \"Content-type\": \"application/json; charset=UTF-8\"\r\n              }\r\n          }\r\n        );\r\n        let responseJson = await response.json();\r\n        return responseJson;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n}\r\n\r\nexport async function httpDelete(route, data) {\r\n    try {\r\n        let response = await fetch(\r\n          `http://${HttpConfig.host}:${HttpConfig.port}/${route}`,\r\n          {\r\n              method: 'POST',\r\n          }\r\n        );\r\n        let responseJson = await response.json();\r\n        return responseJson;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}